// üéØ Controller - Pr√©-Matr√≠culas P√∫blicas
// Respons√°vel por receber as requisi√ß√µes HTTP e chamar o service correspondente.

const preMatriculasService = require("./preMatriculasService");
const matriculaService = require("../../matricula/matriculaService"); // üëà integra√ß√£o direta
const logger = require("../../../utils/logger");

/**
 * Cria uma nova pr√©-matr√≠cula (rota p√∫blica)
 */
async function criarPreMatricula(req, res) {
  try {
    const dados = req.body;
    logger.info(
      "[preMatriculasController] Nova solicita√ß√£o de pr√©-matr√≠cula recebida"
    );

    const resultado = await preMatriculasService.criarPreMatricula(dados);
    return res.status(201).json(resultado);
  } catch (err) {
    logger.error(
      "[preMatriculasController] Erro ao criar pr√©-matr√≠cula:",
      err.message
    );
    return res.status(400).json({
      error: err.message || "Erro ao criar pr√©-matr√≠cula.",
    });
  }
}

/**
 * Lista todas as pr√©-matr√≠culas pendentes (rota interna/admin)
 */
async function listarPendentes(req, res) {
  try {
    const { organizacaoId } = req.params;
    const lista = await preMatriculasService.listarPendentes(organizacaoId);
    return res.json(lista);
  } catch (err) {
    logger.error(
      "[preMatriculasController] Erro ao listar pendentes:",
      err.message
    );
    return res
      .status(400)
      .json({ error: "Erro ao listar pr√©-matr√≠culas pendentes." });
  }
}

/**
 * Atualiza o status de uma pr√©-matr√≠cula (aprovar/rejeitar)
 */
async function atualizarStatus(req, res) {
  try {
    const { id } = req.params;
    const { status } = req.body;

    logger.info(
      `[preMatriculasController] Atualizando status da pr√©-matr√≠cula #${id} ‚Üí ${status}`
    );

    const resultado = await preMatriculasService.atualizarStatus(id, status);

    // üöÄ Se aprovado, cria automaticamente aluno e matr√≠cula real
    if (status === "aprovado") {
      try {
        // Busca os dados completos da pr√©-matr√≠cula no banco
        const pre = await preMatriculasService.buscarPorId(id);

        if (!pre)
          throw new Error("Pr√©-matr√≠cula n√£o encontrada para criar matr√≠cula.");

        await matriculaService.criarMatricula(pre);
        logger.info(
          `[preMatriculasController] Matr√≠cula criada automaticamente para ID ${id}`
        );
      } catch (err) {
        logger.error(
          "[preMatriculasController] Erro ao criar matr√≠cula ap√≥s aprova√ß√£o:",
          err.message
        );
      }
    }

    return res.json(resultado);
  } catch (err) {
    logger.error(
      "[preMatriculasController] Erro ao atualizar status:",
      err.message
    );
    return res
      .status(400)
      .json({ error: "Erro ao atualizar status da pr√©-matr√≠cula." });
  }
}

/**
 * Retorna o nome do grupo (usado no formul√°rio p√∫blico)
 */
async function getGrupo(req, res) {
  try {
    const { organizacaoId } = req.params;
    const grupo =
      await preMatriculasService.buscarGrupoPorOrganizacaoId(organizacaoId);
    return res.json({ grupo });
  } catch (err) {
    logger.error(
      "[preMatriculasController] Erro ao buscar grupo:",
      err.message
    );
    return res.status(400).json({ error: "Erro ao buscar grupo." });
  }
}

module.exports = {
  criarPreMatricula,
  listarPendentes,
  atualizarStatus,
  getGrupo,
};
